/*++

Module Name:

    device.c - Device handling events for example driver.

Abstract:

   This file contains the device entry points and callbacks.
    
Environment:

    Kernel-mode Driver Framework

--*/

#include "device.h"
#include "Public.h"
#include "Queue.h"
#include "hostcontroller.h"
#include "roothub.h"
#include "device.tmh"
#include "others.h"

#ifdef ALLOC_PRAGMA
#pragma alloc_text (PAGE, driverCreateDevice)
#endif

NTSTATUS
driverCreateDevice(
    _Inout_ PWDFDEVICE_INIT DeviceInit
    )
/*++

Routine Description:

    Worker routine called to create a device and its software resources.

Arguments:

    DeviceInit - Pointer to an opaque init structure. Memory for this
                    structure will be freed by the framework when the WdfDeviceCreate
                    succeeds. So don't access the structure after that point.

Return Value:

    NTSTATUS

--*/
{
    WDF_OBJECT_ATTRIBUTES attributes;
    PDEVICE_CONTEXT deviceContext;
    WDFDEVICE device;
    NTSTATUS status;
	WDF_TIMER_CONFIG  timerConfig;
	WDF_WORKITEM_CONFIG  workitemConfig;
	WDF_DPC_CONFIG dpcConfig;

    PAGED_CODE();

	do
	{
		WDF_OBJECT_ATTRIBUTES_INIT_CONTEXT_TYPE(&attributes, DEVICE_CONTEXT);
		attributes.EvtDestroyCallback = Device_EvtDestroyCallback;
		status = WdfDeviceCreate(&DeviceInit, &attributes, &device);
		if (!NT_SUCCESS(status))
		{
			TraceEvents(TRACE_LEVEL_ERROR, TRACE_DEVICE, "WdfDeviceCreate failed, status:%#x", status);
			break;
		}

		//
		// Get a pointer to the device context structure that we just associated
		// with the device object. We define this structure in the device.h
		// header file. DeviceGetContext is an inline function generated by
		// using the WDF_DECLARE_CONTEXT_TYPE_WITH_NAME macro in device.h.
		// This function will do the type checking and return the device context.
		// If you pass a wrong object handle it will return NULL and assert if
		// run under framework verifier mode.
		//
		deviceContext = DeviceGetContext(device);

		//
		// Initialize the context.
		//
		deviceContext->pRemteDevInfo = (PREMOTE_DEVICE_INFO)ExAllocatePoolWithTag(NonPagedPool, sizeof(REMOTE_DEVICE_INFO)*PORT_COUNT, VBUS_SEAN_POOL_TAG);
		if (deviceContext->pRemteDevInfo == NULL)
		{
			status = STATUS_INSUFFICIENT_RESOURCES;
			break;
		}
		else
		{
			RtlZeroMemory((PVOID)deviceContext->pRemteDevInfo, sizeof(REMOTE_DEVICE_INFO)*PORT_COUNT);
		}
		//
		// Create a device interface so that applications can find and talk
		// to us.
		//
		status = WdfDeviceCreateDeviceInterface(
			device,
			&GUID_DEVINTERFACE_driver,
			NULL // ReferenceString
		);

		if (!NT_SUCCESS(status))
		{
			TraceEvents(TRACE_LEVEL_ERROR, TRACE_DEVICE, "WdfDeviceCreateDeviceInterface failed, status:%#x", status);
			break;
		}

		//
		// Initialize the I/O Package and any Queues
		//
		status = driverQueueInitialize(device);
		if (!NT_SUCCESS(status))
		{
			TraceEvents(TRACE_LEVEL_ERROR, TRACE_DEVICE, "driverQueueInitialize failed");
			break;
		}

		//	create workitem object
		WDF_OBJECT_ATTRIBUTES_INIT(&attributes);
		//WDF_OBJECT_ATTRIBUTES_SET_CONTEXT_TYPE(&attributes, VHCISEAN_WORKITEM_CONTEXT);
		attributes.ParentObject = device;
		WDF_WORKITEM_CONFIG_INIT(&workitemConfig, IoCtrl_EvtWorkItem);
		status = WdfWorkItemCreate(&workitemConfig, &attributes, &deviceContext->IoCtrl_WrokItem);
		if (!NT_SUCCESS(status))
		{
			TraceEvents(TRACE_LEVEL_ERROR, TRACE_DEVICE, "WdfWorkItemCreate failed, %!STATUS!", status);
			break;
		}

		//	create timer object
		WDF_TIMER_CONFIG_INIT(&timerConfig, RootHub_TimerFunc);
		WDF_OBJECT_ATTRIBUTES_INIT(&attributes);
		attributes.ParentObject = device;
		status = WdfTimerCreate(&timerConfig, &attributes, &deviceContext->RootHub_Timer);
		if (!NT_SUCCESS(status))
		{
			TraceEvents(TRACE_LEVEL_ERROR, TRACE_DEVICE, "WdfTimerCreate failed, %!STATUS!", status);
			break;
		}

		//	create dpc object
		WDF_DPC_CONFIG_INIT(&dpcConfig, CompleteUrb_EvtDpcFunc);
		dpcConfig.AutomaticSerialization = TRUE;
		WDF_OBJECT_ATTRIBUTES_INIT(&attributes);
		attributes.ParentObject = device;
		status = WdfDpcCreate(&dpcConfig, &attributes, &deviceContext->CompleteUrbDpc);
		if (!NT_SUCCESS(status))
		{
			TraceEvents(TRACE_LEVEL_ERROR, TRACE_DEVICE, "WdfTimerCreate failed, %!STATUS!", status);
			break;
		}

		//	create host controller object
		status = CreateHostController(device);
		if (!NT_SUCCESS(status))
		{
			TraceEvents(TRACE_LEVEL_ERROR, TRACE_DEVICE, "CreateHostController failed");
			break;
		}

		//	create host roothub object
		status = CreateRoothub(device);
		if (!NT_SUCCESS(status))
		{
			TraceEvents(TRACE_LEVEL_ERROR, TRACE_DEVICE, "CreateRoothub failed");
			break;
		}
	} while (FALSE);

    return status;
}

VOID Device_EvtDestroyCallback(
	_In_ WDFOBJECT Object
)
{
	//WDFDEVICE device = (WDFDEVICE)Object;
	PDEVICE_CONTEXT pDeviceContext = DeviceGetContext((WDFDEVICE)Object);
	
	ExFreePoolWithTag((PVOID)pDeviceContext->pRemteDevInfo, VBUS_SEAN_POOL_TAG);

	return;
}